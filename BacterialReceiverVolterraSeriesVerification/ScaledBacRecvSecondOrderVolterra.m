function H = BacRecvSecondOrderVolterra(order, n,v, q2, kappaApi, kApi,deltaRx, c_tilde, k1,k2, delta_ccp, a_tilde,kP, ...
    k_Dp, delta_Api, betaE, deltaE, input_fct, ...
    tc, constCcp, constApi, constAIP, constRx, constElux)
%UNTITLED Second Order Volterra Transfer FUnction/ Frequency Response
%   see Bacterial Receiver
H =@(s1, s2)   -(k1/2)*tc.*constAIP.*( ( ...                                                        % C_CP = C + AIP / P
                ((k1*c_tilde*constAIP*(tc./constCcp)) ./ ((s1 + tc*(k2 + delta_ccp)))) ...
                + ...
                ((k1*c_tilde*constAIP*(tc./constCcp)) ./ ((s2 + tc*(k2 + delta_ccp)))) ...
                )) ...
                ./((s1 +s2 + tc*(k2 + delta_ccp))) .*...
   input_fct(s1) .* input_fct(s2);  % Input is scaled Heaviside

if(bitget(order,2))

    H =@(s1, s2) H(s1,s2) .* ...   
    -(1/2)*kP*constCcp*tc.*( (((kP*a_tilde*tc*(constCcp/constApi)) ./ (n*v*(s1 + tc*(k_Dp + delta_Api)))) ...       % A_PI = C_CP + A  
    + ...
    ((kP*a_tilde*tc*(constCcp/constApi)) ./ (n*v*(s2 + tc*(k_Dp + delta_Api)))) ...
    ) ...
    ./(n*v*(s1 + s2 + tc*(k_Dp + delta_Api))));
end


if(bitget(order,3))                                                         % A_Pi -> R_(X)

    H =@(s1, s2) H(s1,s2) .* ...                                         
  (q2*n*kappaApi*(tc/constRx))./((s1+s2 + tc*deltaRx));
end




if(bitget(order,4))                                                         % R_(x) -> E_Lux

    H =@(s1, s2) H(s1,s2) .*...   
                  ((betaE*constRx*(tc/constElux)) ./ ((s1+s2+tc*deltaE)));
end






% Legacy
% H =@(s1, s2)  (((-1)*n*kappaApi)./((kApi*n*v)^2.*(s1+s2 + deltaRx))).*...

    
end




% H =@(s1, s2)  ...((q2*n*kappaApi)./((s1+s2 + deltaRx))).*...
%     -(k1/2).*( ( ...                                                        % C_CP = C + AIP / P
%                 ((k1*c_tilde) ./ (s1 + k2 + delta_ccp)) ...
%                 + ...
%                 ((k1*c_tilde) ./ (s2 + k2 + delta_ccp)) ...
%                 ) ...
%                 ./(s1 +s2 + k2 + delta_ccp) ...
%              ) .*...    
%     -(1/2)*kP.*( (((kP*a_tilde) ./ (n*v*(s1 + k_Dp + delta_Api))) ...       % A_PI = C_CP + A  
%     + ...
%     ((kP*a_tilde) ./ (n*v*(s2 + k_Dp + delta_Api))) ...
%     ) ...
%     ./(n*v*(s1 + s2 + k_Dp + delta_Api))) .*...
%     1.*...(betaE ./ (s1+s2+deltaE))  .*...     % R_X -> Bioluminescent Protein
%    (input_fct(s1) .* input_fct(s2));  % Input is scaled Heaviside



